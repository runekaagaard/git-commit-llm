#!/bin/bash

set -o pipefail

# Define prompts

# Simple commit message prompt
SIMPLE_PROMPT='Task: Generate a git commit message

Requirements:
- Single line only
- Use imperative mood (e.g., "Add", "Fix", "Update")
- Maximum 50 characters
- Must accurately describe the changes

Context:
- Current branch: %s

Git diff output:
%s

Response:
- Format your response as a single line with no prefix or quotes.'

# Detailed commit message prompt
MAJOR_PROMPT='Task: Generate a detailed git commit message

Requirements:
1. First line (subject):
   - Use imperative mood (e.g., "Add", "Fix", "Update")
   - Maximum 50 characters
   - Must summarize the change
   - No period at the end

2. Second line:
   - Must be blank

3. Remaining lines (body):
   - Wrap text at 72 characters
   - Explain what and why (not how)
   - Include line breaks between paragraphs
   - Use bullet points for multiple items
   - Can use multiple paragraphs

Context:
- Current branch: %s

Git diff output:
%s

Response:
- Format your response starting directly with the subject line, no quotes or prefixes.'

help_text() {
    cat << EOF
git-commit-llm - Generate commit messages using Claude AI

USAGE:
    git-commit-llm [OPTIONS]

OPTIONS:
    -h, --help           Show this help message
    -s, --stage-all      Stage all changes (including untracked files) before generating commit message
    -m, --major          Generate a detailed multi-line commit message for substantial changes
    -o, --model MODEL    Select LLM model (default: claude-3-sonnet-20240229)
    -p, --push           Push changes after committing
    -d, --diff           Display staged changes before generating commit message

DESCRIPTION:
    This script uses Claude AI to analyze your git changes and generate an appropriate
    commit message. By default it creates concise single-line messages. Use --major
    for significant changes that require detailed explanation.

PROMPTS:
    Default prompt:
$(echo "${SIMPLE_PROMPT}" | sed 's/^/        /')

    Major changes prompt (--major):
$(echo "${MAJOR_PROMPT}" | sed 's/^/        /')

WORKFLOW:
    1. Changes are analyzed and sent to Claude AI
    2. Generated commit message is saved to a temporary file
    3. Your \$EDITOR opens with the suggested message
    4. Save the file to commit, exit without saving to abort

EXIT CODES:
    0   Success - commit was created
    1   No changes to commit (working directory clean)
    2   Not in a git repository
    3   LLM command failed or returned error
    4   User aborted commit (editor closed without saving)
    5   Git commit command failed
    6   \$EDITOR not set
    7   Failed to create or write temporary file
    8   Invalid command line arguments
    10  Unexpected error

EXAMPLES:
    # Generate simple commit message for staged changes:
    git-commit-llm

    # Stage all changes and generate detailed commit message:
    git-commit-llm --add-all --major

REQUIREMENTS:
    - llm command-line tool
    - git
    - Active git repository
    - \$EDITOR environment variable set
EOF
}

error() {
    echo "Error: $1" >&2
    exit "$2"
}

cleanup() {
    if [ -f "$TEMP_FILE" ]; then
        rm -f "$TEMP_FILE"
    fi
}

# Set up trap for cleanup
trap cleanup EXIT

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    error "Not in a git repository" 2
fi

# Parse arguments
ADD_ALL=0
MAJOR=0
MODEL="claude-3-sonnet-20240229"
PUSH=0
SHOW_DIFF=0
DEBUG=0

# Parse short options first
while getopts ":hsmo:pdD" opt; do
    case $opt in
        h)
            help_text
            exit 0
            ;;
        s)
            ADD_ALL=1
            ;;
        m)
            MAJOR=1
            ;;
        o)
            MODEL="$OPTARG"
            ;;
        p)
            PUSH=1
            ;;
        d)
            SHOW_DIFF=1
            ;;
        D)
            DEBUG=1
            ;;
        \?)
            # Skip invalid options - might be a long option
            continue
            ;;
        :)
            error "Option -$OPTARG requires an argument" 8
            ;;
    esac
done
shift $((OPTIND-1))

# Then parse remaining arguments for long options
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            help_text
            exit 0
            ;;
        --stage-all)
            ADD_ALL=1
            shift
            ;;
        --major)
            MAJOR=1
            shift
            ;;
        --model)
            shift
            if [ -z "$1" ]; then
                error "Model name required for --model option" 8
            fi
            MODEL="$1"
            shift
            ;;
        --push)
            PUSH=1
            shift
            ;;
        --diff)
            SHOW_DIFF=1
            shift
            ;;
        *)
            error "Invalid argument: $1" 8
            ;;
    esac
done

# Check for EDITOR
if [ -z "$EDITOR" ]; then
    error "\$EDITOR environment variable is not set" 6
fi

# Check if llm command is available
if ! command -v llm >/dev/null 2>&1; then
    error "llm command not found. Please install it first" 3
fi

# Add all changes if requested
if [ $ADD_ALL -eq 1 ]; then
    git add -A
fi

# Check if there are any changes to commit
if git diff --cached --quiet; then
    error "No changes staged for commit" 1
fi

# Show diff if requested
if [ $SHOW_DIFF -eq 1 ]; then
    git diff --cached
    echo -e "\nPress Enter to continue or Ctrl+C to abort..."
    read -r
fi

# Get current branch name
BRANCH_NAME=$(git symbolic-ref --short HEAD 2>/dev/null || echo "detached HEAD")

# Create temporary file
TEMP_FILE=$(mktemp /tmp/git-commit-llm.XXXXXX) || error "Failed to create temporary file" 7

# Get the diff
DIFF=$(git diff --cached)

# Format prompt based on commit type
if [ $MAJOR -eq 1 ]; then
    PROMPT=$(printf "$MAJOR_PROMPT" "$BRANCH_NAME" "$DIFF")
else
    PROMPT=$(printf "$SIMPLE_PROMPT" "$BRANCH_NAME" "$DIFF")
fi

if [ $DEBUG -eq 1 ]; then
    echo "LLM PROMPT"
    echo "=========="
    echo
    echo "$PROMPT"
    exit 0
fi

echo "Generating commit message using LLM (this may take a few seconds)..."
if ! llm --model="$MODEL" "$PROMPT" > "$TEMP_FILE" 2>/dev/null; then
    error "Failed to generate commit message using LLM" 3
fi

# Get initial modification time with nanosecond precision
INITIAL_MTIME=$(stat -f %m.%N "$TEMP_FILE" 2>/dev/null || stat -c %Y.%N "$TEMP_FILE")

# Open editor for user to review/modify
$EDITOR "$TEMP_FILE" || error "Editor closed with an error" 4

# Get new modification time with nanosecond precision
NEW_MTIME=$(stat -f %m.%N "$TEMP_FILE" 2>/dev/null || stat -c %Y.%N "$TEMP_FILE")

# Check if file was saved (using nanosecond precision)
if [ "$INITIAL_MTIME" = "$NEW_MTIME" ]; then
    error "Commit message not saved in editor, aborting" 4
fi

# Check if file is empty or only contains comments
if [ ! -s "$TEMP_FILE" ] || ! grep -q '^[^#]' "$TEMP_FILE"; then
    error "Commit message empty or only contains comments, aborting" 4
fi

# Create the commit
if ! git commit -F "$TEMP_FILE"; then
    error "Failed to create commit" 5
fi

# Push if requested
if [ $PUSH -eq 1 ]; then
    if ! git push; then
        error "Failed to push changes" 9
    fi
    echo "Successfully created commit and pushed changes"
else
    echo "Successfully created commit"
fi
exit 0
